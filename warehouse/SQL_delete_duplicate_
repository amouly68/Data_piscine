-- Suppression directe en utilisant une requête avec LAG()
DELETE FROM your_table_name
WHERE ctid IN (
    SELECT current_ctid
    FROM (
        SELECT 
            ctid AS current_ctid,
            LAG(ctid) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS previous_ctid,
            event_type,
            product_id,
            user_id,
            user_session,
            LAG(event_type) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_event_type,
            LAG(product_id) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_product_id,
            LAG(user_id) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_user_id,
            LAG(user_session) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_user_session
        FROM your_table_name
    ) AS DupCheck
    WHERE
        event_type = prev_event_type AND
        product_id = prev_product_id AND
        user_id = prev_user_id AND
        user_session = prev_user_session AND
        previous_ctid IS NOT NULL
);

Avec condition de temps
-- Suppression directe des doublons avec une contrainte temporelle
DELETE FROM your_table_name
WHERE ctid IN (
    SELECT current_ctid
    FROM (
        SELECT 
            ctid AS current_ctid,
            LAG(ctid) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS previous_ctid,
            event_type,
            product_id,
            user_id,
            user_session,
            LAG(event_type) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_event_type,
            LAG(product_id) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_product_id,
            LAG(user_id) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_user_id,
            LAG(user_session) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_user_session,
            LAG(event_time) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_event_time,
            EXTRACT(EPOCH FROM event_time - LAG(event_time) OVER (PARTITION BY user_id, user_session ORDER BY event_time)) AS time_diff
        FROM your_table_name
    ) AS DupCheck
    WHERE
        event_type = prev_event_type AND
        product_id = prev_product_id AND
        user_id = prev_user_id AND
        user_session = prev_user_session AND
        previous_ctid IS NOT NULL AND
        ABS(time_diff) <= 1  -- Condition pour la fourchette de temps de ±1 seconde
);




--Creation d'une table avec tous les duplicates --
WITH 
First100 AS (
    SELECT *
    FROM data_2022_oct
    ORDER BY event_time
    LIMIT 100
),
DupCheck AS (
    SELECT 
        event_time,
        event_type,
        product_id,
        user_id,
        user_session,
        LAG(event_type) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_event_type,
        LAG(product_id) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_product_id,
        LAG(user_id) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_user_id,
        LAG(user_session) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_user_session,
        LAG(event_time) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_event_time
    FROM First100
),
DupRows AS (
    SELECT 
        prev_event_time AS event_time,
        prev_event_type AS event_type,
        prev_product_id AS product_id,
        prev_user_id AS user_id,
        prev_user_session AS user_session
    FROM DupCheck
    WHERE 
        event_type = prev_event_type AND
        product_id = prev_product_id AND
        user_id = prev_user_id AND
        user_session = prev_user_session AND
        prev_event_time IS NOT NULL
    UNION ALL
    SELECT 
        event_time,
        event_type,
        product_id,
        user_id,
        user_session
    FROM DupCheck
    WHERE 
        event_type = prev_event_type AND
        product_id = prev_product_id AND
        user_id = prev_user_id AND
        user_session = prev_user_session AND
        prev_event_time IS NOT NULL
)
SELECT * INTO DuplicateTable
FROM DupRows
ORDER BY event_time;



==> ajout de securite avec condition de temps :
DupCheck AS (
    SELECT 
        event_time,
        event_type,
        product_id,
        user_id,
        user_session,
        LAG(event_type) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_event_type,
        LAG(product_id) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_product_id,
        LAG(user_id) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_user_id,
        LAG(user_session) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_user_session,
        LAG(event_time) OVER (PARTITION BY user_id, user_session ORDER BY event_time) AS prev_event_time,
        EXTRACT(EPOCH FROM event_time - LAG(event_time) OVER (PARTITION BY user_id, user_session ORDER BY event_time)) AS time_diff
    FROM First100
),
DupRows AS (
    SELECT 
        prev_event_time AS event_time,
        prev_event_type AS event_type,
        prev_product_id AS product_id,
        prev_user_id AS user_id,
        prev_user_session AS user_session
    FROM DupCheck
    WHERE 
        event_type = prev_event_type AND
        product_id = prev_product_id AND
        user_id = prev_user_id AND
        user_session = prev_user_session AND
        prev_event_time IS NOT NULL AND
        ABS(time_diff) <= 1  -- Condition pour la fourchette de 1 seconde

    UNION ALL

    SELECT 
        event_time,
        event_type,
        product_id,
        user_id,
        user_session
    FROM DupCheck
    WHERE 
        event_type = prev_event_type AND
        product_id = prev_product_id AND
        user_id = prev_user_id AND
        user_session = prev_user_session AND
        prev_event_time IS NOT NULL AND
        ABS(time_diff) <= 1  -- Condition pour la fourchette de 1 seconde
)
SELECT * INTO DuplicateTable
FROM DupRows
ORDER BY event_time;




WITH
DupCheck AS (
    SELECT 
        event_time,
        event_type,
        product_id,
        user_id,
        user_session,
        LAG(event_time) OVER (PARTITION BY user_id, user_session, product_id, event_type ORDER BY event_time) AS prev_event_time,
        EXTRACT(EPOCH FROM event_time - LAG(event_time) OVER (PARTITION BY user_id, user_session, product_id, event_type ORDER BY event_time)) AS time_diff
    FROM test_table
),
DupRows AS (
    SELECT 
        prev_event_time AS event_time,
        event_type,
        product_id,
        user_id,
        user_session
    FROM DupCheck
    WHERE 
        prev_event_time IS NOT NULL AND
        ABS(time_diff) <= 1  -- Condition pour la fourchette de 1 seconde

    UNION ALL

    SELECT 
        event_time,
        event_type,
        product_id,
        user_id,
        user_session
    FROM DupCheck
    WHERE 
        prev_event_time IS NOT NULL AND
        ABS(time_diff) <= 1  -- Condition pour la fourchette de 1 seconde
)
SELECT * INTO DuplicateTable1
FROM DupRows
ORDER BY event_time;
