import pandas as pd


df = pd.read_csv("/goinfre/amouly/piscineds/csv_files/customer/data_2022_oct.csv", nrows=100)
df.tail()
df.head()
# Identifier les doublons consécutifs
df['is_duplicate'] = df.duplicated(keep=False)
df['is_duplicate'].value_counts()
duplicates = df[df['is_duplicate']]
df_cleaned = df[~df['is_duplicate']]
df.drop_duplicates(inplace=True)
df_cleaned.loc[:,'is_duplicate'] = (df_cleaned['event_type'] == df_cleaned['event_type'].shift(1)) & \
                     (df_cleaned['product_id'] == df_cleaned['product_id'].shift(1)) & \
                     (df_cleaned['user_id'] == df_cleaned['user_id'].shift(1)) & \
                     (df_cleaned['user_session'] == df_cleaned['user_session'].shift(1))

df_cleaned.loc [:, 'is_duplicate'] = df_cleaned['is_duplicate'] | (df_cleaned['event_type'] == df_cleaned['event_type'].shift(-1)) & \
                     (df_cleaned['product_id'] == df_cleaned['product_id'].shift(-1)) & \
                     (df_cleaned['user_id'] == df_cleaned['user_id'].shift(-1)) & \
                     (df_cleaned['user_session'] == df_cleaned['user_session'].shift(-1))

df_cleaned.iloc[0:20]
df_cleaned['is_duplicate'].value_counts()
duplicates2 = df_cleaned[df_cleaned['is_duplicate']]
duplicates3 = pd.concat([duplicates, duplicates2])
duplicates3
# Filtrer les doublons
duplicates = df[df['is_duplicate']]

# Supprimer les doublons du DataFrame original
df_cleaned = df[~df['is_duplicate']]
duplicates

# Optionnel: Écrire le DataFrame nettoyé retour dans la base de données
# Cela peut être fait en remplaçant la table ou en faisant des suppressions et insertions
# Pour des raisons de sécurité, faites attention avec ces opérations:
# df_cleaned.to_sql('your_table_name', con=conn, if_exists='replace', index=False)

# Fermer la connexion
conn.close()

# Afficher les résultats
print("Doublons identifiés :")
print(duplicates)
print("DataFrame nettoyé :")
print(df_cleaned.head())




dfff = pd.DataFrame({
    'A': [1, 2, 3, 4, 5],
    'B': [10, 20, 30, 40, 50]
})

print("DataFrame Original:")
print(dfff)

# Décalage des données d'une ligne vers le bas
dfff_shifted = dfff.shift(1)
print("\nDataFrame Après Shift de 1 position vers le bas:")
print(dfff_shifted)
dfff_shifted.shift(-1)

# Décalage des données d'une ligne vers le haut
dfff_shifted_up = dfff.shift(-1)
print("\nDataFrame Après Shift de 1 position vers le haut:")
print(dfff_shifted_up)